import os
import datetime
from openai import OpenAI
from elevenlabs.client import ElevenLabs
from dotenv import load_dotenv

# 1. Charger les cl√©s API
load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
eleven_api_key = os.getenv("ELEVENLABS_API_KEY")

today = datetime.date.today()
today_str = today.strftime("%d %B %Y")
date_tag = today.strftime("%d-%m-%Y")

yesterday = today - datetime.timedelta(days=1)
yesterday_str = yesterday.strftime("%d %B %Y")

# 2. Initialiser OpenAI
client_openai = OpenAI(api_key=openai_api_key)

# 3. Prompt dynamique avec la date
script_prompt = f"""
Tu es le cr√©ateur √©ditorial du podcast Simon FinTech, un podcast anim√© par un √©tudiant de 20 ans qui d√©crypte l‚Äôactualit√© de la finance et de la technologie dans un ton dynamique, accessible et bienveillant.
√Ä partir de 4 √† 5 actualit√©s marquantes du {yesterday_str}, r√©dige un script complet de podcast pr√™t √† √™tre lu directement par une IA vocale.
Tu dois uniquement t‚Äôappuyer sur des articles publi√©s le {yesterday_str}, issus de sources fiables et bien r√©f√©renc√©es comme Bloomberg, Reuters, Financial Times, WSJ, Forbes, CNBC, TechCrunch, Les √âchos, BFM Business, Wired, The Economist, etc..
Le script doit faire entre 1000 et 1200 mots pour une lecture √† voix haute d‚Äôenviron 7 √† 8 minutes.
Chaque sujet abord√© doit inclure : un contexte clair, une explication structur√©e des faits, et une mini-analyse ou projection personnelle.
Le ton doit √™tre naturel, fluide et parl√©, sans titres ni structure visible, avec des transitions naturelles entre les sujets.
Commence toujours par : "Bienvenue dans Simon FinTech, le podcast qui rend la finance et la tech simples, vivantes et surtout passionnantes."
Termine syst√©matiquement par : "√Ä demain pour un nouveau point sur l‚Äôactu tech !"
"""

script_response = client_openai.chat.completions.create(
    model="gpt-4o",
    messages=[{"role": "user", "content": script_prompt}],
    temperature=0.7,
    max_tokens=2000
)
script_text = script_response.choices[0].message.content.strip()

# 4. Extraire la premi√®re actualit√© du script
paragraphs = script_text.split("\n\n")
first_actu = paragraphs[1] if len(paragraphs) > 1 else script_text[:300]

# 5. G√©n√©rer le titre bas√© sur la premi√®re actu uniquement
title_prompt = f"""
Voici le d√©but d‚Äôun √©pisode de podcast sur la tech et la finance : 

{first_actu}

Donne-moi un titre accrocheur, percutant, original et court (max 15 mots), qui donne envie d‚Äô√©couter cet √©pisode.
Ne mets pas la date. Pas de ponctuation superflue. Juste le titre.
"""

title_response = client_openai.chat.completions.create(
    model="gpt-4o",
    messages=[{"role": "user", "content": title_prompt}],
    temperature=0.8,
    max_tokens=60
)
episode_title = title_response.choices[0].message.content.strip()
print(f"üéØ Titre g√©n√©r√© : {episode_title}")

# 6. Sauvegarder le script texte
os.makedirs("scripts", exist_ok=True)
script_filename = f"scripts/{date_tag} - {episode_title}.txt"
with open(script_filename, "w", encoding="utf-8") as f:
    f.write(script_text)
print(f"üìù Script sauvegard√© : {script_filename}")

# 7. G√©n√©rer l'audio avec ElevenLabs
from elevenlabs.client import ElevenLabs
client_elevenlabs = ElevenLabs(api_key=eleven_api_key)

audio = client_elevenlabs.text_to_speech.convert(
    text=script_text,
    voice_id="pNInz6obpgDQGcFmaJgB",
    model_id="eleven_multilingual_v2",
    output_format="mp3_44100_128"
)

# 8. Sauvegarder l'audio
os.makedirs("podcasts", exist_ok=True)
audio_filename = f"podcasts/{date_tag} - {episode_title}.mp3"
with open(audio_filename, "wb") as f:
    for chunk in audio:
        f.write(chunk)

print(f"‚úÖ Podcast g√©n√©r√© et sauvegard√© : {audio_filename}")
