import os
import datetime
from openai import OpenAI
from elevenlabs.client import ElevenLabs
from dotenv import load_dotenv

# 1. Charger les cl√©s API depuis .env
load_dotenv()
openai_api_key = os.getenv("OPENAI_API_KEY")
eleven_api_key = os.getenv("ELEVENLABS_API_KEY")

# 2. D√©finir la date du jour automatiquement
today = datetime.date.today()
today_str = today.strftime("%d %B %Y")  # exemple : "20 mai 2025"
filename = f"podcasts/podcast_{today.strftime('%d-%m-%Y')}.mp3"
script_filename = f"scripts/script_{date_tag}.txt"

# 3. Initialiser OpenAI
client_openai = OpenAI(api_key=openai_api_key)

# 4. Prompt dynamique avec la date
prompt = f"""
Tu es le cr√©ateur √©ditorial du podcast Simon FinTech, un podcast anim√© par un √©tudiant de 20 ans qui d√©crypte l‚Äôactualit√© de la finance et de la technologie dans un ton dynamique, accessible et bienveillant.
√Ä partir de 4 √† 5 articles d‚Äôactualit√© r√©cents dat√©s du {today_str}, r√©dige un script complet de podcast pr√™t √† √™tre lu directement par une IA vocale.
Tu dois uniquement t‚Äôappuyer sur des articles issus de sources fiables et bien r√©f√©renc√©es, comme Bloomberg, Reuters, Financial Times, WSJ, CNBC, TechCrunch, Les √âchos, BFM Business, Wired, The Economist, etc. Tu ne dois jamais mentionner le nom de ces sources dans le texte.
Le script doit faire entre 1000 et 1200 mots pour une lecture √† voix haute d‚Äôenviron 7 √† 8 minutes.
Chaque sujet abord√© doit inclure : un contexte clair, une explication structur√©e des faits, et une mini-analyse ou projection personnelle.
Le ton doit √™tre naturel, fluide et parl√©, sans titres ni structure visible, avec des transitions naturelles entre les sujets, et sans aucune mention de sources ou liens.
Commence toujours par : "Bienvenue dans Simon FinTech, le podcast qui rend la finance et la tech simples, vivantes et surtout passionnantes."
Termine syst√©matiquement par : "√Ä demain pour un nouveau point sur l‚Äôactu tech !"
"""

# 5. Appel API GPT
response = client_openai.chat.completions.create(
    model="gpt-4o",
    messages=[{"role": "user", "content": prompt}],
    temperature=0.7,
    max_tokens=2000
)

script_text = response.choices[0].message.content.strip()

os.makedirs("scripts", exist_ok=True)
with open(script_filename, "w", encoding="utf-8") as f:
    f.write(script_text)
print(f"üìù Script sauvegard√© : {script_filename}")


# 6. Initialiser le client ElevenLabs
client_elevenlabs = ElevenLabs(api_key=eleven_api_key)

# 7. G√©n√©ration audio avec ElevenLabs
audio = client_elevenlabs.text_to_speech.convert(
    text= script_text[:200],
    voice_id="pNInz6obpgDQGcFmaJgB",  # Remplace par l'ID de la voix souhait√©e
    model_id="eleven_multilingual_v2",
    output_format="mp3_44100_128"
)

os.makedirs("podcasts", exist_ok=True)
with open(filename, "wb") as f:
    for chunk in audio:
        f.write(chunk)

print(f"‚úÖ Podcast g√©n√©r√© et sauvegard√© : {filename}")
